/**
 * NonPlayableCharacter.java
 * 
 * This abstract class will be a super-class for 
 * various types of computer-controlled players.
 * 
 * @author Jaylon Kiper
 * @version 1.0
 * Programming Project 3
 * SP19
 */
public abstract class NonPlayerCharacter {

	protected String uniqueID;//generated by the generateID() method in the GameUtilities class
	protected IntelligenceType intelligence;//could be used by a AI engine determine how it interacts with other objects
	protected PersonalityType personality;//could be used by a AI engine determine the level of sophistication an object uses to respond to stimulus
	protected boolean active;//indicates if the object is actively engaged in interaction with other objects
	
	/**
	 * Empty-argument constructor that should set 
	 * default values for all of the object’s data, 
	 * except uniqueID, which is 
	 * randomly generated by GameUtilities. 
	 */
	public NonPlayerCharacter() {
		uniqueID = GameUtilities.generateID();
		intelligence = IntelligenceType.SUPERIOR;
		personality = PersonalityType.MEAN;
		active = true;
	}//end empty-argument constructor
	
	/**
	 * Preferred constructor that should set accept intelligence, 
	 * personality and active as parameters except uniqueID, 
	 * which is randomly generated by GameUtilities.
	 * @param intelligence
	 * @param personality
	 * @param active
	 */
	public NonPlayerCharacter(IntelligenceType i, PersonalityType p, boolean a) {
		this.setIntelligenceType(i);
		this.setPersonalityType(p);
		this.setActive(a);
	}//end preferred constructor
	
	/**
	 * introduce(), which returns a String
	 * the character uses to introduce itself. 
	 * @return
	 */
	public abstract String introduce();//end introduce
	
	/**
	 * exclaim(), which chooses from five 
	 * potential String responses to being hit. 
	 */
	public abstract String exclaim();//end exclaim
	
	/**
	 * Getter for the uniqueID
	 * @return uniqueID
	 */
	public String getUniqueID() {
		return uniqueID;
	}//end getUniqueID

	/**Getter for intelligence
	 * @return intelligence
	 */
	public IntelligenceType getIntelligenceType() {
		return intelligence;
	}//end getIntelligenceType

	/**
	 * Setter for intelligence
	 * @param intelligence
	 */
	public void setIntelligenceType(IntelligenceType i) {
		this.intelligence = i;
	}//end setIntelligenceType

	/**Getter for personality
	 * @return personality
	 */
	public PersonalityType getPersonalityType() {
		return personality;
	}//end getPersonality

	/**
	 * Setter for personality
	 * @param personality
	 */
	public void setPersonalityType(PersonalityType p) {
		this.personality = p;
	}//end setPersonality
	
	/**
	 * Getter for the active
	 * @return active
	 */
	public boolean getActive() {
		return active;
	}//end getActive

	/**
	 * Setter for the active
	 * @param active
	 */
	public void setActive(boolean a) {
		this.active = a;
	}//end setActive
	
}//end class
